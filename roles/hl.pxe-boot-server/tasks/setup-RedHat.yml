---
- name: RedHat | Install Packages
  package: 
    name: "{{ item }}"
    state: present
  loop: "{{ packages }}"

- name: RedHat | Start and Enable Service
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  loop: "{{ systemd_services }}"

- name: RedHat | Enable Service in Firewalld
  firewalld:
    immediate: yes
    service: "{{ item }}"
    permanent: yes
    state: enabled
  loop: "{{ firewall_ports }}"

#
# Configure VSFTPD server
#
- name: RedHat | Enable Passive FTP Range in Firewalld
  firewalld:
    immediate: yes
    port: "{{ pasv_ftp_min_port }}-{{ pasv_ftp_max_port }}/tcp"
    permanent: yes
    state: enabled

- name: RedHat | Copy {{ vsftpd_config_file }} Configuration File
  template:
    src: "{{ vsftpd_config_file }}.j2"
    dest: "/etc/vsftpd/{{ vsftpd_config_file }}"
    owner: root
    group: root
    mode: 0644
    force: yes
  notify:
    - vsftpd

- name: RedHat | Check FTP Port
  ignore_errors: yes
  wait_for:
    host: "{{ ansible_fqdn }}"
    port: "21"
    timeout: 2

- name: RedHat | Create PXE Directories for FTP
  file:
    path: "{{ ftp_directory }}/pxe/{{ item }}"
    state: directory
    mode: 0755
  loop:
    - "{{ networkboot_directory_rocky9 }}"
    - "{{ networkboot_directory_rocky8 }}"
    - "{{ networkboot_directory_centos7 }}"

- name: RedHat | Copy Kickstart Files to FTP Directory
  template:
    src: "{{ item }}.j2"
    dest: "{{ ftp_directory }}/pxe/{{ item }}"
    owner: root
    group: root
    mode: 0644
    force: yes
  loop:
  - "{{ kickstart_file_rocky9_host }}"
  - "{{ kickstart_file_rocky9_packer }}"
  - "{{ kickstart_file_rocky8_host }}"
  - "{{ kickstart_file_rocky8_packer }}"
  - "{{ kickstart_file_centos7_packer }}"

#
# Configure TFTP server
#
- name: RedHat | Create Directory {{ tftp_directory }}/pxelinux.cfg
  file:
    path: "{{ tftp_directory }}/pxelinux.cfg"
    state: directory
    mode: 0755

- name: RedHat | Create File {{ tftp_directory }}/pxelinux.cfg/default
  template:
    src: "default.j2"
    dest: "{{ tftp_directory }}/pxelinux.cfg/default"
    owner: root
    group: root
    mode: 0644
    force: yes

- name: RedHat | Create Network Boot Directories
  file:
    path: "{{ tftp_directory }}/networkboot/{{ item }}"
    state: directory
    mode: 0755
  loop:
    - "{{ networkboot_directory_rocky9 }}"
    - "{{ networkboot_directory_rocky8 }}"
    - "{{ networkboot_directory_centos7 }}"
    - "{{ networkboot_directory_ubuntu1804server }}"
    - "{{ networkboot_directory_ubuntu1804desktop }}"
    - "{{ networkboot_directory_ubuntu2004server }}"
    - "{{ networkboot_directory_ubuntu2004desktop }}"

- name: RedHat | Copy Syslinux Files to TFTP Directory
  copy:
    src: "/usr/share/syslinux/"
    dest: "{{ tftp_directory }}/"
    remote_src: yes

#
# Configure NFS server
# Ubuntu 18.04 LTS Desktop uses casper to boot into Live DVD mode.
# Casper supports network boot via NFS only. As a result, in order to 
# boot Ubuntu 18.04 LTS and any Ubuntu derivatives via PXE, we need to
# have a fully functional NFS server accessible over the network.
#
- name: RedHat | Set NFS Server for the Home Directories (SELinux)
  ansible.posix.seboolean:
    name: "{{ item }}"
    state: yes
    persistent: yes
  loop: "{{ nfs_selinux_booleans }}"

- name: RedHat | Create Directory {{ nfs_directory }}
  file:
    path: "{{ nfs_directory }}"
    state: directory
    mode: 0755

- name: RedHat | Create PXE Directories for NFS
  file:
    path: "{{ nfs_directory }}/{{ item }}"
    state: directory
    mode: 0755
  loop:
    - "{{ networkboot_directory_ubuntu1804server }}"
    - "{{ networkboot_directory_ubuntu1804desktop }}"
    - "{{ networkboot_directory_ubuntu2004server }}"
    - "{{ networkboot_directory_ubuntu2004desktop }}"

- name: RedHat | Create NFS Exports File
  template:
    src: "exports.j2"
    dest: "/etc/exports"
    owner: root
    group: root
    mode: 0644
    force: yes
  notify:
    - nfs-server

- name: RedHat | Check NFS Port
  ignore_errors: yes
  wait_for:
    host: "{{ ansible_fqdn }}"
    port: "2049"
    timeout: 2

#
# Configure Nginx server
#
- name: RedHat | Create Directory {{ nginx_directory }}/pub/isos
  file:
    path: "{{ nginx_directory }}/pub/isos"
    state: directory
    mode: 0755

- name: RedHat | Copy {{ nginx_config_file }} Configuration File
  template:
    src: "{{ nginx_config_file }}.j2"
    dest: "/etc/nginx/{{ nginx_config_file }}"
    owner: root
    group: root
    mode: 0644
    force: yes
  notify:
    - nginx

- name: RedHat | Check Nginx Port
  ignore_errors: yes
  wait_for:
    host: "{{ ansible_fqdn }}"
    port: "80"
    timeout: 2

#
# Download PXE boot installation media
#
- name: RedHat | Check /root free space
  shell: df /root --output\=avail|tail -n1
  register: root_freespace
      
- name: RedHat | Fail if not Enough Free Disk Space in /root
  fail:
    msg: /root does not have the minimum space required to continue (40GB needed for DVD ISO files)
  when: root_freespace.stdout|float is lt 4000000

- name: RedHat | Download PXE Boot Media
  include_tasks: download_media.yml
  loop: "{{ pxe_boot_media }}"
  loop_control:
    loop_var: outer_item
  when: download_pxe_boot_media | bool

- name: RedHat | Copy Kickstart File for Ubuntu 18.04 Server
  template:
    src: "{{ kickstart_file_ubuntu1804server }}.j2"
    dest: "{{ nfs_directory }}/{{ networkboot_directory_ubuntu1804server }}/preseed/{{ kickstart_file_ubuntu1804server }}"
    owner: root
    group: root
    mode: 0644
    force: yes

- name: RedHat | Copy Kickstart File for Ubuntu 18.04 Desktop
  template:
    src: "{{ kickstart_file_ubuntu1804desktop }}.j2"
    dest: "{{ nfs_directory }}/{{ networkboot_directory_ubuntu1804desktop }}/preseed/{{ kickstart_file_ubuntu1804desktop }}"
    owner: root
    group: root
    mode: 0644
    force: yes

- name: RedHat | Copy Kickstart File for Ubuntu 20.04 Server
  template:
    src: "{{ kickstart_file_ubuntu2004server }}.j2"
    dest: "{{ nfs_directory }}/{{ networkboot_directory_ubuntu2004server }}/preseed/{{ kickstart_file_ubuntu2004server }}"
    owner: root
    group: root
    mode: 0644
    force: yes

- name: RedHat | Copy Kickstart File for Ubuntu 20.04 Desktop
  template:
    src: "{{ kickstart_file_ubuntu2004desktop }}.j2"
    dest: "{{ nfs_directory }}/{{ networkboot_directory_ubuntu2004desktop }}/preseed/{{ kickstart_file_ubuntu2004desktop }}"
    owner: root
    group: root
    mode: 0644
    force: yes

#
# Download Packer media
#
- name: RedHat | Check /var free space
  shell: df /var --output\=avail|tail -n1
  register: var_freespace

- name: RedHat | Fail if not Enough Free Disk Space in /var
  fail:
    msg: /var does not have the minimum space required to continue (3GB needed for Packer ISO files)
  when: var_freespace.stdout|float is lt 3000000

- name: RedHat | Download Packer ISO with check (sha256) - this will take time
  ignore_errors: yes
  get_url:
    url: "{{ item.iso_url }}"
    dest: "{{ nginx_directory }}/pub/isos/"
    setype: "httpd_sys_content_t"
    mode: 0644
    checksum: "sha256:{{ item.iso_sha256 }}"
  loop: "{{ packer_media }}"
  when: download_packer_media | bool
